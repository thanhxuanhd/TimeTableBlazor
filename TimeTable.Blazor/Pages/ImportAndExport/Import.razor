@page "/Import"
@using System.Net.Http.Headers
@inject IImportExportService ImportExportService
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject INotificationService NotifyService

<RadzenCard>
    <h3>Import</h3>

    <div>
        <div class="rz-text-align-center">
            <RadzenDropDown @bind-Value=@templateSelect TextProperty="Description" ValueProperty="Type" Data="ImportTemplates" Placeholder="Select Import Type" Style="width: 100%;" />
        </div>

        <div class="py-2">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Manual Upload</RadzenText>

            <InputFile OnChange="@OnInputFileChange" @key=@inputFileKey />
        </div>

    </div>
</RadzenCard>
@code {
    private string templateSelect;
    private Guid inputFileKey;
    private List<ImportTemplate> ImportTemplates;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        inputFileKey = Guid.NewGuid();

        ImportTemplates = ImportExportService.GetImportTemplates();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var valid = Validation(e);

        if (!valid)
        {
            return;
        }

        try
        {
            using var content = new MultipartFormDataContent();

            foreach (var file in e.GetMultipleFiles())
            {
                var fileContent =
                    new StreamContent(file.OpenReadStream(file.Size));

                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);
            }

            var client = ClientFactory.CreateClient();
            client.BaseAddress = new Uri(Navigation.BaseUri);
            var response = await client.PostAsync($"{client.BaseAddress}api/ImportExport/Upload/{templateSelect}", content);

            var messageResponse = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                NotifyService.Error(messageResponse);
            }
            else
            {
                NotifyService.Success(messageResponse);
            }

            templateSelect = string.Empty;
            inputFileKey = Guid.NewGuid();
          
            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotifyService.Error(ex.Message);
        }

    }


    private bool Validation(InputFileChangeEventArgs args)
    {
        bool valid = true;
        if (string.IsNullOrEmpty(templateSelect))
        {
            valid = false;
            NotifyService.Error("Please select template.");
        }

        if (!args.GetMultipleFiles().Any())
        {
            valid = false;
            NotifyService.Error("Please select file upload");

        }

        return valid;
    }
}
