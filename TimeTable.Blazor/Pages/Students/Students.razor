@page "/Students"
@using TimeTable.Blazor.Interfaces;
@using TimeTable.Blazor.Models;
@inject IStudentService StudentService;
@inject NavigationManager Navigation

<PageTitle>Student</PageTitle>
<h3>Students</h3>
<RadzenCard>
    <div class="d-flex justify-content-end py-2">
        <RadzenButton Click=@(args => CreateUser(args)) Icon="add_circle_outline" Text="Add Student" ButtonStyle="ButtonStyle.Primary" />
    </div>

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
                    PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@students" TItem="StudentDto" ColumnWidth="300px"
                    LogicalFilterOperator="LogicalFilterOperator.Or" IsLoading="@isLoading" LoadData="Load" Count="@count">
        <Columns>
            <RadzenDataGridColumn TItem="StudentDto" Property="Code" Title="Code" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="StudentDto" Property="FirstName" Title="First Name" />
            <RadzenDataGridColumn TItem="StudentDto" Property="LastName" Title="Last Name" />
            <RadzenDataGridColumn TItem="StudentDto" Property="Email" Title="Email" />
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    IEnumerable<StudentDto> students;
    bool isLoading = false;
    int count;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    void Load(LoadDataArgs args)
    {
        isLoading = true;

        students = StudentService.GetStudents(args, out count);

        isLoading = false;
    }

    void CreateUser(MouseEventArgs events)
    {
        Navigation.NavigateTo("/Students/Create");
    }
}
