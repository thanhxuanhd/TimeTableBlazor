@inject ISubjectService SubjectService
@inject DialogService DialogService
@inject INotificationService NotifyService
@inject ILogger<DeleteSubject> Logger


<div class="row">
    <div class="error">
        @if (Errors.Any())
        {
            <ul>
                @foreach (var error in Errors.Where(e => !string.IsNullOrEmpty(e)))
                {
                    <li class="text-danger">
                        @error
                    </li>
                }
            </ul>
        }
    </div>

    <div class="col-12 mb-2">
        Are your want to delete the Subject [@Code] ?
    </div>
    <div class="col-12b">
        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Danger" Click="OnDelete" />
        <RadzenButton Text="Cancel" Click="OnCancel" ButtonStyle="ButtonStyle.Light" />
    </div>
</div>
@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public string Code { get; set; }

    public List<string> Errors { get; set; } = new List<string>();

    private void OnDelete()
    {
        try
        {
            Errors = new List<string>();
            (bool success, List<string> errors) = SubjectService.DeleteSubject(Id);
            if (success)
            {
                NotifyService.Success("Deleted Subject Success.");
                DialogService.Close(true);
            }
            else
            {
                NotifyService.Error("Delete Subject Error.");
                Errors = errors;
            }

        }
        catch (Exception ex)
        {
            NotifyService.Error("Delete Subject Error.");
            Logger.LogError($"Error: {ex.Message}");
        }
    }

    private void OnCancel()
    {
        DialogService.Close(true);
    }
}
