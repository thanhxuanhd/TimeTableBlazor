@page "/"
@using TimeTable.Blazor.Pages.Sessions;
@inject DialogService DialogService
@inject ITimetableService TimetableService
@inject INotificationService NotifyService


<PageTitle>Time Table</PageTitle>

@inject DialogService DialogService
<RadzenCard>
    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="StartDate" EndProperty="EndDate"
                     TextProperty="Text" SelectedIndex="2"
                     SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender LoadData="@OnLoadData">
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
        <RadzenYearView />
    </RadzenScheduler>
</RadzenCard>

@*<EventConsole @ref=@console />*@

@code {
    RadzenScheduler<Appointment> scheduler;
    IList<Appointment> appointments;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        appointments = new List<Appointment>();
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 18)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.View.Text != "Year")
        {
            await DialogService.OpenAsync<AddAppointment>("Add Appointment",
                 new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            await scheduler.Reload();

            await InvokeAsync(StateHasChanged);
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        await DialogService.OpenAsync<EditAppointment>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();

        await InvokeAsync(StateHasChanged);
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop
    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        // Get the appointments for between the Start and End
        appointments = await TimetableService.GetAppointments(args.Start, args.End);
    }
}
