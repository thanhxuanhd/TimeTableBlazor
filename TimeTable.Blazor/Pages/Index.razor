@page "/"
@using TimeTable.Blazor.Models;
@inject DialogService DialogService
@inject ITimetableService TimetableService
@inject INotifyService NotifyService


<PageTitle>Time Table</PageTitle>

@inject DialogService DialogService
<RadzenCard>
    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="StartDate" EndProperty="EndDate"
                     TextProperty="Text" SelectedIndex="2"
                     SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
        <RadzenYearView />
    </RadzenScheduler>
</RadzenCard>

@*<EventConsole @ref=@console />*@

@code {
    RadzenScheduler<Appointment> scheduler;
    IList<Appointment> appointments;
    DateTime limitedRange;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        appointments = new List<Appointment>();
        limitedRange = DateTime.Now.AddDays(-30);
        try
        {
            appointments = TimetableService.GetAppointments(limitedRange);

        }
        catch (Exception ex)
        {
            NotifyService.Error(ex.Message);
        }
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.View.Text != "Year")
        {
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        //await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        //await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop
    }
}
