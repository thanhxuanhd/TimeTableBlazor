@page "/Teachers"
@inject ITeacherService TeacherService

<PageTitle>Teacher</PageTitle>
<h3>Teachers</h3>

<RadzenCard>
    <div class="d-flex justify-content-end py-2">
        <RadzenButton Click=@(args => CreateTeacher(args)) Icon="add_circle_outline" Text="Add Teacher" ButtonStyle="ButtonStyle.Primary" />
    </div>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
                    PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@teachers" TItem="TeacherDto" ColumnWidth="300px"
                    LogicalFilterOperator="LogicalFilterOperator.Or" IsLoading="@isLoading" LoadData="Load" Count="@count">
        <Columns>
            <RadzenDataGridColumn TItem="TeacherDto" Property="Code" Title="Code" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="TeacherDto" Property="FirstName" Title="First Name" />
            <RadzenDataGridColumn TItem="TeacherDto" Property="LastName" Title="Last Name" />
            <RadzenDataGridColumn TItem="TeacherDto" Property="Email" Title="Email" />
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    IEnumerable<TeacherDto> teachers;
    bool isLoading = false;
    int count;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    void Load(LoadDataArgs args)
    {
        isLoading = true;

        teachers = TeacherService.GetTeachers(args, out count);

        isLoading = false;
    }

    public void CreateTeacher(MouseEventArgs e)
    {
        
    }
}