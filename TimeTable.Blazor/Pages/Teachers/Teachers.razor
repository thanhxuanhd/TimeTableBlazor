@page "/Teachers"

@inject ITeacherService TeacherService
@inject NavigationManager Navigation
@inject DialogService DialogService

<PageTitle>Teachers</PageTitle>

<RadzenCard>
    <h3>Teachers</h3>
    <div class="d-flex justify-content-end py-2">
        <RadzenButton Click=@(args => CreateTeacher(args)) Icon="add_circle_outline" Text="Add Teacher" ButtonStyle="ButtonStyle.Primary" />
    </div>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
                    PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@teachers" TItem="TeacherDto" ColumnWidth="300px"
                    LogicalFilterOperator="LogicalFilterOperator.Or" IsLoading="@isLoading" LoadData="Load" Count="@count" @ref="gridTeacher">
        <Columns>
            <RadzenDataGridColumn TItem="TeacherDto" Property="Code" Title="Code" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="TeacherDto" Property="FirstName" Title="First Name" />
            <RadzenDataGridColumn TItem="TeacherDto" Property="LastName" Title="Last Name" />
            <RadzenDataGridColumn TItem="TeacherDto" Property="Email" Title="Email" />
            <RadzenDataGridColumn Width="100px" TItem="TeacherDto" Property="Id" Title="Action" Filterable="false" Sortable="false">
                <Template Context="data">
                    <RadzenButton Variant="Variant.Text" Icon="edit" Click=@(() => EditTeacher(data.Id)) Size="ButtonSize.Medium" BusyText="Edit Subject" />
                    <RadzenButton Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Icon="delete" Click=@(async() => await DeleteSubject(data.Id,data.Code)) Size="ButtonSize.Medium" BusyText="Delete Subject" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    IEnumerable<TeacherDto> teachers;
    RadzenDataGrid<TeacherDto> gridTeacher;
    bool isLoading = false;
    int count;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    void Load(LoadDataArgs args)
    {
        isLoading = true;

        teachers = TeacherService.GetTeachers(args, out count);

        isLoading = false;
    }

    public void CreateTeacher(MouseEventArgs e)
    {
        Navigation.NavigateTo("/Teachers/Create");
    }

    void EditTeacher(Guid? id)
    {
        Navigation.NavigateTo($"/Teachers/Edit/{id.Value}");
    }

    async Task DeleteSubject(Guid? id, string code)
    {
        bool? success = false;

        success = await DialogService.OpenAsync<DeleteTeacher>("Delete Subject", new Dictionary<string, object> {
            { "Id", id.Value },
            { "Code", code }
        }, new DialogOptions()
        {
            CloseDialogOnEsc = false
        });

        await gridTeacher.Reload();
    }
}